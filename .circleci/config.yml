version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>


  revert-migrations:
    description: Revert the last migration if it didnt successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            FAILURE=$(curl -k --request GET https://kvdb.io/NqK6G9tq8Jq7kMdMXacYZd/DB_MIGRATION_<< parameters.id >>)
            echo $FAILURE
            if [[ "$FAILURE" == "failure" ]]
            then
              pwd
              ls -la
              export TYPEORM_HOST=ec2-13-233-68-53.ap-south-1.compute.amazonaws.com
              echo $TYPEORM_HOST
              npm run migrations:revert
            fi
          when: << parameters.when >>


orbs:
  slack: circleci/slack@3.4.2  # for slack integration to https://udapeople.slack.com; reference: https://circleci.com/blog/continuous-integration-slack-twilio/


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
                npm install
                npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command:  |
                npm install
      - run:
          name: Frontend test
          working_directory: ./frontend
          command:  |
                npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command:  |
                npm install
                npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Install dependencies
          working_directory: ./backend
          command:  |
                npm install
      - run:
          name: Backend test
          working_directory: ./backend
          command:  |
                npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command:  |
                npm install
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command:   |
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -   checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Install dependencies
          working_directory: ./backend
          command:  |
                npm install
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command:   |
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      -  checkout
      - run:
          name: Install Dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    # docker:
    #   - image: amazon/aws-cli
    executor: python  
    steps:
      -  checkout
      - add_ssh_keys:
          fingerprints: ["2a:55:a0:47:be:47:46:f9:cb:9c:a3:03:6e:33:9e:3b"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install NPM
          working_directory: ./backend
          command:  |
                npm install
      - run:
          name: Run migrations
          working_directory: ./backend
          command:  |
                export TYPEORM_HOST=ec2-13-233-68-53.ap-south-1.compute.amazonaws.com
                echo $TYPEORM_HOST
                npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl  https://kvdb.io/NqK6G9tq8Jq7kMdMXacYZd/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7} -d "success" -k
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl  https://kvdb.io/NqK6G9tq8Jq7kMdMXacYZd/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7} -d "failure" -k
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_success

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-f4d6334" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_GET_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build   
            cd dist
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "Done"
                    
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2a:55:a0:47:be:47:46:f9:cb:9c:a3:03:6e:33:9e:3b"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm audit fix
            npm run build
            cp -r node_modules dist
            zip -r dist.zip dist
            mkdir -p .circleci/.ansible/roles/deploy/files/
            mv dist.zip .circleci/.ansible/roles/deploy/files/
            ansible-playbook -i inventory.txt ../.circleci/.ansible/deploy-backend.yml
            echo "Done"  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-f4d6334" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_GET_IP}:3030"
            echo "${API_URL}"
            curl -s $API_URL/api/status
      - run:
          name: Backend smoke test.
          command: |
            
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

       
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            
      - run:
          name: Update cloudfront distribution
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
      - persist_to_workspace:
          root: ~/
          paths:
            - project/cloudfront
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]